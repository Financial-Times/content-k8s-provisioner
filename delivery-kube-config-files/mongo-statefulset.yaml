#The volumes used by the stateful set
---
apiVersion: v1
kind: PersistentVolume
metadata:
  annotations:
    kubernetes.io/createdby: aws-ebs-dynamic-provisioner
    pv.kubernetes.io/bound-by-controller: "yes"
    pv.kubernetes.io/provisioned-by: kubernetes.io/aws-ebs
  labels:
    failure-domain.beta.kubernetes.io/region: eu-west-1
    failure-domain.beta.kubernetes.io/zone: eu-west-1a
  name: mongodb-0-vol
  namespace: "default"
spec:
  accessModes:
  - ReadWriteOnce
  awsElasticBlockStore:
    fsType: ext4
    volumeID: aws://eu-west-1a/vol-059f5ebdabedc2a3a
  capacity:
    storage: 50Gi
  claimRef:
    apiVersion: v1
    kind: PersistentVolumeClaim
    name: mongo-persistent-mongodb-0
    namespace: default
  persistentVolumeReclaimPolicy: Retain
---
apiVersion: v1
kind: PersistentVolume
metadata:
  annotations:
    kubernetes.kuio/createdby: aws-ebs-dynamic-provisioner
    pv.kubernetes.io/bound-by-controller: "yes"
    pv.kubernetes.io/provisioned-by: kubernetes.io/aws-ebs
  labels:
    failure-domain.beta.kubernetes.io/region: eu-west-1
    failure-domain.beta.kubernetes.io/zone: eu-west-1b
  name: mongodb-1-vol
  namespace: ""
spec:
  accessModes:
  - ReadWriteOnce
  awsElasticBlockStore:
    fsType: ext4
    volumeID: aws://eu-west-1b/vol-0cf71c95be5f7751a
  capacity:
    storage: 50Gi
  claimRef:
    apiVersion: v1
    kind: PersistentVolumeClaim
    name: mongo-persistent-mongodb-1
    namespace: default
  persistentVolumeReclaimPolicy: Retain
---
apiVersion: v1
kind: PersistentVolume
metadata:
  annotations:
    kubernetes.io/createdby: aws-ebs-dynamic-provisioner
    pv.kubernetes.io/bound-by-controller: "yes"
    pv.kubernetes.io/provisioned-by: kubernetes.io/aws-ebs
  labels:
    failure-domain.beta.kubernetes.io/region: eu-west-1
    failure-domain.beta.kubernetes.io/zone: eu-west-1c
  name: mongodb-2-vol
  namespace: ""
spec:
  accessModes:
  - ReadWriteOnce
  awsElasticBlockStore:
    fsType: ext4
    volumeID: aws://eu-west-1c/vol-0227fb9ba0de07cd3
  capacity:
    storage: 50Gi
  claimRef:
    apiVersion: v1
    kind: PersistentVolumeClaim
    name: mongo-persistent-mongodb-2
    namespace: default
  persistentVolumeReclaimPolicy: Retain

# The mongo StatefulSet definition
---
apiVersion: apps/v1beta1
kind: StatefulSet
metadata:
  name: mongodb
spec:
  serviceName: "mongodb"
  replicas: 3
  template:
    metadata:
      labels:
        app: mongodb
      annotations:
        pod.alpha.kubernetes.io/initialized: "true"
    spec:
      terminationGracePeriodSeconds: 30
      containers:
      - name: mongodb
        image: coco/coco-mongodb:v3.0.2
        resources:
          limits:
            memory: 2000Mi
        ports:
        - containerPort: 27017
        - containerPort: 28017
        livenessProbe:
          tcpSocket:
            port: 27017
          initialDelaySeconds: 15
        volumeMounts:
        - name: mongo-persistent
          mountPath: /data/db
        lifecycle:
          preStop:
            exec:
              command: ["/bin/bash", "-c", 'printf "use admin\ndb.shutdownServer()" | mongo']
  volumeClaimTemplates:
  - metadata:
      name: mongo-persistent
      annotations:
        volume.alpha.kubernetes.io/storage-class: standard
    spec:
      accessModes: [ "ReadWriteOnce" ]
      resources:
        requests:
          storage: 50Gi

---
# A headless service to create DNS records
apiVersion: v1
kind: Service
metadata:
  name: mongodb
  labels:
    app: mongodb
    visualize: "true"
spec:
  ports:
  - name: work
    port: 27017
    targetPort: 27017
  - name: admin
    port: 28017
    targetPort: 28017
  clusterIP: None
  selector:
    app: mongodb
