---
- name: Update the k8s stack
  hosts: localhost
  connection: local

  # Include the aws account specific cluster variables
  vars_files:
    - vars/{{ environment_type }}-{{ aws_region }}.yaml
    - vaults/{{ platform }}/vault_{{ environment_type }}.yaml

  # Include the environment specific cluster variables
  pre_tasks:
    - include_vars: vars/{{ platform }}-{{ environment_type }}-{{ aws_region }}.yaml
      when: (cluster_environment == "")

    - include_vars: vars/{{ platform }}-{{ environment_type }}-{{ cluster_environment }}-{{ aws_region }}.yaml
      when: (cluster_environment != "")

  tasks:
    - name: Set the stack name when cluster_environment variable is set
      set_fact: stack_name='{{ platform }}-{{ cluster_name }}-{{ cluster_environment }}-{{ aws_region }}'
      when: (cluster_environment != "")

    - name: Set the stack name when cluster_environment variable is not set
      set_fact: stack_name='{{ platform }}-{{ cluster_name }}-{{ aws_region }}'
      when: (cluster_environment == "")

    # Generate the cluster.yaml template
    - name: Generate the cluster config
      template:
        src: templates/cluster-template.yaml.j2
        dest: /ansible/cluster.yaml
    
    # Check if the credentials folder is empty
    # If it is, abort the execution of the playbook
    - name: Get the number of pem files in the credentials directory
      find:
        paths: /ansible/credentials
        patterns: '*.pem'
      register: pem_files

    - name: Check if the credentials folder is empty
      fail: msg="The credentials folder is empty. Add the cluster credentials in the /ansible/credentials folder"
      when: pem_files.examined|int == 0

    - name: Set the provisioner bucket
      set_fact:
        provisioner_bucket: "{{ 'k8s-provisioner-test-{{ aws_region }}' if (environment_type == 'd') else 'k8s-provisioner-prod-{{ aws_region }}' }}"

    - name: Validate the cluster config
      command: kube-aws validate --s3-uri s3://{{ provisioner_bucket }}
      environment:
        AWS_ACCESS_KEY_ID: "{{ aws_access_key }}"
        AWS_SECRET_ACCESS_KEY: "{{ aws_secret_key }}"

    - name: Update the cluster
      command: kube-aws update --s3-uri s3://{{ provisioner_bucket }}
      environment:
        AWS_ACCESS_KEY_ID: "{{ aws_access_key }}"
        AWS_SECRET_ACCESS_KEY: "{{ aws_secret_key }}"
