---
- name: Provision a persistent volume for Kafka
  ec2_vol:
    aws_access_key: "{{ aws_access_key }}"
    aws_secret_key: "{{ aws_secret_access_key }}"
    region: "{{ region }}"
    zone: "{{ region }}a"
    name: "{{ stack_name }}-kafka"
    volume_size: 80
    volume_type: gp2
    tags:
      environment: "{{ environment_type }}"
      teamDL: "universal.publishing.platform@ft.com"
      systemCode: "{{ platform }}"
  register: ec2_vol_del_kafka

- name: Provision a persistent volume for Mongo
  ec2_vol:
    aws_access_key: "{{ aws_access_key }}"
    aws_secret_key: "{{ aws_secret_access_key }}"
    region: "{{ region }}"
    zone: "{{ item }}"
    name: "{{ stack_name }}-mongo-{{ item }}"
    volume_size: 50
    volume_type: gp2
    tags:
      environment: "{{ environment_type }}"
      teamDL: "universal.publishing.platform@ft.com"
      systemCode: "{{ platform }}"
  with_items: 
    - "{{ region }}a"
    - "{{ region }}b"
    - "{{ region }}c"
  register: ec2_vol_del_mongo

- name: Provision EBS volume for Prometheus
  ec2_vol:
    aws_access_key: "{{ aws_access_key }}"
    aws_secret_key: "{{ aws_secret_access_key }}"
    region: "{{ region }}"
    zone: "{{ item }}"
    name: "{{ stack_name }}-prometheus-{{ item }}"
    volume_size: 100
    volume_type: gp2
    tags:
      environment: "{{ environment_type }}"
      teamDL: "universal.publishing.platform@ft.com"
      systemCode: "{{ platform }}"
  with_items: 
    - "{{ region }}a"
    - "{{ region }}b"
  register: ec2_vol_del_prometheus

- name: Provision EBS volume for Thanos
  ec2_vol:
    aws_access_key: "{{ aws_access_key }}"
    aws_secret_key: "{{ aws_secret_access_key }}"
    region: "{{ region }}"
    zone: "{{ region }}a"
    name: "{{ stack_name }}-thanos-store"
    volume_size: 50
    volume_type: gp2
    tags:
      environment: "{{ environment_type }}"
      teamDL: "universal.publishing.platform@ft.com"
      systemCode: "{{ platform }}"
  register: ec2_vol_del_thanos

- name: Generate the S3 bucket policy for Image Publish
  template:
    src: templates/image-publish-s3.json.j2
    dest: templates/image-publish-s3.json

- name: Create an S3 bucket for Image Publish
  s3_bucket:
    aws_access_key: "{{ aws_access_key }}"
    aws_secret_key: "{{ aws_secret_access_key }}"
    region: "{{ region }}"
    name: "{{ stack_name }}-imagepublish"
    state: present
    tags:
      environment: "{{ environment_type }}"
      teamDL: "universal.publishing.platform@ft.com"
      systemCode: "{{ platform }}"

- name: Add bucket policy for the Image Publish S3 bucket
  s3_bucket:
    aws_access_key: "{{ aws_access_key }}"
    aws_secret_key: "{{ aws_secret_access_key }}"
    name: "{{ stack_name }}-imagepublish"
    policy: "{{ lookup('file','templates/image-publish-s3.json') }}"

- name: Generate the S3 bucket policy for generic rw s3
  template:
    src: templates/generic-rw-s3.json.j2
    dest: templates/generic-rw-s3.json

- name: Create an S3 bucket for generic rw s3
  s3_bucket:
    aws_access_key: "{{ aws_access_key }}"
    aws_secret_key: "{{ aws_secret_access_key }}"
    region: "{{ region }}"
    name: "{{ stack_name }}-genericrw"
    policy: "{{ lookup('file','templates/generic-rw-s3.json') }}"
    state: present
    tags:
      environment: "{{ environment_type }}"
      teamDL: "universal.publishing.platform@ft.com"
      systemCode: "{{ platform }}"

- name: Add bucket policy for the generic rw S3 bucket
  s3_bucket:
    aws_access_key: "{{ aws_access_key }}"
    aws_secret_key: "{{ aws_secret_access_key }}"
    region: "{{ region }}"
    name: "{{ stack_name }}-genericrw"
    policy: "{{ lookup('file','templates/generic-rw-s3.json') }}"

- name: Provision a persistent volume for Neo4j
  ec2_vol:
    aws_access_key: "{{ aws_access_key }}"
    aws_secret_key: "{{ aws_secret_access_key }}"
    region: "{{ region }}"
    zone: "{{ item }}"
    name: "{{ stack_name }}-neo4j-{{ item }}"
    volume_size: 100
    volume_type: gp2
    tags:
      environment: "{{ environment_type }}"
      teamDL: "universal.publishing.platform@ft.com"
      systemCode: "{{ platform }}"
  with_items: 
    - "{{ region }}a"
    - "{{ region }}b"
    - "{{ region }}c"
  register: ec2_vol_neo4j

- name: Provision a persistent volume for Neo4j Backup
  ec2_vol:
    aws_access_key: "{{ aws_access_key }}"
    aws_secret_key: "{{ aws_secret_access_key }}"
    region: "{{ region }}"
    zone: "{{ region }}a"
    name: "{{ stack_name }}-neo4j-backup-{{ region }}a"
    volume_size: 100
    volume_type: gp2
    tags:
      environment: "{{ environment_type }}"
      teamDL: "universal.publishing.platform@ft.com"
      systemCode: "{{ platform }}"
  register: ec2_vol_neo4j_backup

- name: Setup vol names
  set_fact:
    neo_volume_info: []

# File System and Volume IDs for Neo4j and backup which needs to be added in the config
- name: Build EBS details for Neo4j
  set_fact:
    neo_volume_info: "{{ neo_volume_info }} + [ '{{ item.volume.zone}} => {{ item.volume_id }}' ]"
  with_items: "{{ ec2_vol_neo4j.results }}"


# File System  and Volume ID's for Kafka and Mongo which needs to be added in the global config
- name: Setup vol names
  set_fact:
    mongo_volume_info: []

- name: Build EBS details for Mongo
  set_fact:
    mongo_volume_info: "{{ mongo_volume_info }} + [ '{{ item.volume.zone}} => {{ item.volume_id }}' ]"
  with_items: "{{ ec2_vol_del_mongo.results }}"

# Volume IDs for Prometheus which needs to be added in the config
- name: EBS details for Prometheus
  set_fact:
    prometheus_volume_info: "{{ prometheus_volume_info }} + [ '{{ item.volume.zone}} => {{ item.volume_id }}' ]"
  with_items: "{{ ec2_vol_del_prometheus.results }}"

- name: EBS volume details for Thanos
  debug:
    msg: "EBS Volume ID for Thanos: '{{ ec2_vol_del_thanos.volume_id }}'"

- name: EBS details for Neo4j volumes
  debug:
    msg: "{{ neo_volume_info }}"

- name: EBS details for Neo4j backup
  debug:
    msg: "EBS Volume for Neo4j backup: {{ ec2_vol_neo4j_backup.volume.zone}} => {{ ec2_vol_neo4j_backup.volume_id }}"

- name: EBS volume details for Kafka
  debug:
    msg: "EBS Volume ID for delivery Kafka: '{{ ec2_vol_del_kafka.volume_id }}'"

- name: EBS volume details for Mongo
  debug:
    msg: "{{ mongo_volume_info }}"
