---
- name: Provision a k8s stack
  hosts: localhost
  connection: local
  
  # Include the aws account specific cluster variables
  vars_files:
    - vars/defaults.yaml
    - vars/account_configs/{{ environment_type }}-{{ aws_region }}.yaml
    - vaults/{{ platform }}/vault_{{ environment_type }}.yaml

  tasks:
    - include: tasks/setup_for_kube-aws_ops.yaml

    # If credentials are not being shared between environments, generate certs
    - name: Generate cluster credentials if necessary
      command: "{{ item }}"
      with_items:
        - rm -rf credentials/*
        - kube-aws render credentials --generate-ca

    - name: Validate the cluster config
      command: kube-aws validate
      environment:
        AWS_ACCESS_KEY_ID: "{{ aws_access_key }}"
        AWS_SECRET_ACCESS_KEY: "{{ aws_secret_access_key }}"

    - name: Provision a cluster
      command: kube-aws up
      environment:
        AWS_ACCESS_KEY_ID: "{{ aws_access_key }}"
        AWS_SECRET_ACCESS_KEY: "{{ aws_secret_access_key }}"
      tags: prov

    # The public subnets have to tagged for the application ELB can identify the subnets that it can attach itself to
    - name: Tag the public subnets with the clusterid
      command: aws ec2 create-tags --resources {{ item }} --tags Key=kubernetes.io/cluster/{{ stack_name }},Value=true --region={{ region }}
      environment:
        AWS_ACCESS_KEY_ID: "{{ aws_access_key }}"
        AWS_SECRET_ACCESS_KEY: "{{ aws_secret_access_key }}"
      with_items:
        - "{{ public_subnet_zone_a }}"
        - "{{ public_subnet_zone_b }}"
        - "{{ public_subnet_zone_c }}"
 
    # Get the DNS name of the API Server ELB
    - name: Retrieve the Cluster API server ELB
      script: /bin/bash /ansible/files/sh/get_elb.sh
      environment:
        AWS_REGION: "{{ region }}"
        AWS_ACCESS_KEY_ID: "{{ aws_access_key }}"
        AWS_SECRET_ACCESS_KEY: "{{ aws_secret_access_key }}"
        CLUSTER_NAME: "{{ stack_name }}"
      register: api_server_elb

    - name: API Server ELB
      debug:
        msg: "API Server ELB: '{{ api_server_elb.stdout }}'"

    # Create a DNS name for the API Server
    - include: tasks/create_cname.yaml
      vars:
        dns_cname: "{{ stack_name }}-api"
        hostname: "{{ api_server_elb.stdout }}"
        
    - include: tasks/provision/delivery.yaml
      when: (cluster_environment | lower == "delivery")

    - include: tasks/provision/publishing.yaml
      when: (cluster_environment | lower == "publish")

    - include: tasks/provision/pac.yaml
      when: (platform | lower == "pac")

    - name: Zip the credentials
      shell: |
        rm -rf credentials/*.zip
        mkdir credentials.{{ stack_name }}
        cp credentials/* credentials.{{ stack_name }}/
        zip -r credentials/{{ stack_name }}.zip credentials.{{ stack_name }}/*
      tags: post-up

    - name: Make default account admin
      shell: |
        kubectl create clusterrolebinding add-on-cluster-admin --clusterrole=cluster-admin --serviceaccount=default:default
      environment:
        KUBECONFIG: "{{kubeconfig_file_path}}"

    - name: Install RBAC helm chart
      script: /bin/bash /ansible/files/sh/install-rbac-chart.sh
      environment:
        KUBECONFIG: "{{kubeconfig_file_path}}"
      register: cmd_res

    - name: Output RBAC result
      debug: var=cmd_res.stdout_lines

    - name: Annotate default namespace with an expression expressing which roles are permitted to be assumed within that namespace
      shell: |
        kubectl annotate namespace default iam.amazonaws.com/permitted='.*'
      environment:
        KUBECONFIG: "{{kubeconfig_file_path}}"
