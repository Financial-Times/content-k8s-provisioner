---
- name: Reprovision the k8s cluster only
  hosts: localhost
  connection: local

  # Include the aws account specific cluster variables
  vars_files:
    - vars/defaults.yaml
    - vars/account_configs/{{ environment_type }}-{{ aws_region }}.yaml
    - vaults/{{ platform }}/vault_{{ environment_type }}.yaml

  tasks:
    - include: tasks/setup_for_kube-aws_ops.yaml

    - debug:
        msg: "Are you sure you want to destroy cluster {{ stack_name }} ?"

    - pause:
        prompt: "Are you sure you want to destroy cluster {{ stack_name }} ? (Enter to continue or Ctrl+C to abort)"

    # If credentials are being shared between environments, generate certs except ca
    - name: Generate cluster credentials if necessary
      command: "{{ item }}"
      with_items:
        - find credentials/ ! -name 'ca*' -type f -exec rm -f {} +
        - kube-aws render credentials
      when: (share_cluster_credentials | lower == "y" ) and (reuse_credentials | lower != "y")

    # If credentials are not being shared between environments, generate certs
    - name: Generate cluster credentials if necessary
      command: "{{ item }}"
      with_items:
        - rm -rf credentials/*
        - kube-aws render credentials --generate-ca
      when: (share_cluster_credentials | lower != "y") and (reuse_credentials | lower != "y")

    - name: Zip the new credentials
      shell: |
        rm -rf credentials/*.zip
        mkdir credentials.{{ stack_name }}
        cp credentials/* credentials.{{ stack_name }}/
        zip -r credentials/{{ stack_name }}.zip credentials.{{ stack_name }}/*
      tags: post-up

    - name: Destroy the k8s cluster
      command: kube-aws destroy --force
      environment:
        AWS_ACCESS_KEY_ID: "{{ aws_access_key }}"
        AWS_SECRET_ACCESS_KEY: "{{ aws_secret_key }}"

    - debug:
        msg: "Wait until the cluster has been destroyed !!! "

    - pause:
        prompt: "Wait until the cluster has been destroyed (Enter to continue or Ctrl+C to abort)"

    - name: Validate the cluster config
      command: kube-aws validate
      environment:
        AWS_ACCESS_KEY_ID: "{{ aws_access_key }}"
        AWS_SECRET_ACCESS_KEY: "{{ aws_secret_access_key }}"

    - name: Provision a cluster
      command: kube-aws apply --force
      environment:
        AWS_ACCESS_KEY_ID: "{{ aws_access_key }}"
        AWS_SECRET_ACCESS_KEY: "{{ aws_secret_access_key }}"
      tags: k-prov

    # Get the DNS name of the API Server ELB
    - name: Retrieve the Cluster API server ELB
      script: /bin/bash /ansible/files/sh/get_elb.sh
      environment:
        AWS_REGION: "{{ region }}"
        AWS_ACCESS_KEY_ID: "{{ aws_access_key }}"
        AWS_SECRET_ACCESS_KEY: "{{ aws_secret_access_key }}"
        CLUSTER_NAME: "{{ stack_name }}"
      register: api_server_elb
      tags: k-prov

    - name: API Server ELB
      debug:
        msg: "API Server ELB: '{{ api_server_elb.stdout }}'"
      tags: k-prov

    - name: Create a DNS entry for the API Server in Route53
      script: /bin/bash /ansible/files/sh/manage-cname.sh
      environment:
        AWS_REGION: "{{ region }}"
        AWS_ACCESS_KEY_ID: "{{ aws_access_key }}"
        AWS_SECRET_ACCESS_KEY: "{{ aws_secret_access_key }}"
        CNAME_ACTION: "UPSERT"
        DNS_ZONE: "{{ dns_zone }}"
        HOSTED_ZONE_ID: "{{ route53_hosted_zone_id }}"
        API_DOMAIN_NAME: "{{ stack_name }}-api"
        LB_FQDN: "{{ api_server_elb.stdout }}"
      register: manage_cname_output
      tags: k-prov

    - name: Output manage-cname.sh log
      debug:
        msg: "{{ manage_cname_output }}"

    - pause:
        prompt: "Check that the API server EC2 instances have been created, and that {{ stack_name }}-api.{{ dns_zone }} resolves to the correct load balancer. (Enter to continue or Ctrl+C to abort)"

    - name: Make default account admin
      shell: |
        kubectl create clusterrolebinding add-on-cluster-admin --clusterrole=cluster-admin --serviceaccount=default:default
      environment:
        KUBECONFIG: "{{kubeconfig_file_path}}"
      tags: k-setup

    - name: Install RBAC helm chart
      script: /bin/bash /ansible/files/sh/install-rbac-chart.sh
      environment:
        KUBECONFIG: "{{kubeconfig_file_path}}"
      register: cmd_res
      tags: k-setup

    - name: Annotate default namespace with an expression expressing which roles are permitted to be assumed within that namespace
      shell: |
        kubectl annotate namespace default iam.amazonaws.com/permitted='.*'
      environment:
        KUBECONFIG: "{{kubeconfig_file_path}}"
      tags: k-setup

    - name: Output the new Jenkins & Backup tokens
      debug: var=cmd_res.stdout_lines
      tags: post-up

